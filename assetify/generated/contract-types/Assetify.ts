/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Assetify {
  export type AssetStruct = {
    name: string;
    totalShares: BigNumberish;
    sharesAvailable: BigNumberish;
    pricePerShare: BigNumberish;
    owner: string;
    ipfsHashes: string[];
  };

  export type AssetStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string[]
  ] & {
    name: string;
    totalShares: BigNumber;
    sharesAvailable: BigNumber;
    pricePerShare: BigNumber;
    owner: string;
    ipfsHashes: string[];
  };
}

export interface AssetifyInterface extends utils.Interface {
  functions: {
    "addAssetImage(uint256,string)": FunctionFragment;
    "assetShares(uint256,address)": FunctionFragment;
    "assets(uint256)": FunctionFragment;
    "balances(uint256)": FunctionFragment;
    "buyShares(uint256,uint256)": FunctionFragment;
    "createAsset(string,uint256,uint256,string[])": FunctionFragment;
    "getAllAssets()": FunctionFragment;
    "getAssetImages(uint256)": FunctionFragment;
    "getContractBalance()": FunctionFragment;
    "getCurrentPrice(uint256)": FunctionFragment;
    "getUserPortfolio(address)": FunctionFragment;
    "getUserShares(uint256,address)": FunctionFragment;
    "sellShares(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAssetImage"
      | "assetShares"
      | "assets"
      | "balances"
      | "buyShares"
      | "createAsset"
      | "getAllAssets"
      | "getAssetImages"
      | "getContractBalance"
      | "getCurrentPrice"
      | "getUserPortfolio"
      | "getUserShares"
      | "sellShares"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAssetImage",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "assetShares",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "assets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyShares",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAsset",
    values: [string, BigNumberish, BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetImages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPortfolio",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserShares",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sellShares",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAssetImage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyShares", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetImages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPortfolio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellShares", data: BytesLike): Result;

  events: {
    "AssetCreated(uint256,string,uint256,uint256,string[])": EventFragment;
    "ImageAdded(uint256,string)": EventFragment;
    "SharesPurchased(uint256,address,uint256,uint256)": EventFragment;
    "SharesSold(uint256,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ImageAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SharesPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SharesSold"): EventFragment;
}

export interface AssetCreatedEventObject {
  assetId: BigNumber;
  name: string;
  totalShares: BigNumber;
  pricePerShare: BigNumber;
  ipfsHashes: string[];
}
export type AssetCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string[]],
  AssetCreatedEventObject
>;

export type AssetCreatedEventFilter = TypedEventFilter<AssetCreatedEvent>;

export interface ImageAddedEventObject {
  assetId: BigNumber;
  ipfsHash: string;
}
export type ImageAddedEvent = TypedEvent<
  [BigNumber, string],
  ImageAddedEventObject
>;

export type ImageAddedEventFilter = TypedEventFilter<ImageAddedEvent>;

export interface SharesPurchasedEventObject {
  assetId: BigNumber;
  buyer: string;
  amount: BigNumber;
  newPricePerShare: BigNumber;
}
export type SharesPurchasedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  SharesPurchasedEventObject
>;

export type SharesPurchasedEventFilter = TypedEventFilter<SharesPurchasedEvent>;

export interface SharesSoldEventObject {
  assetId: BigNumber;
  seller: string;
  amount: BigNumber;
  newPricePerShare: BigNumber;
}
export type SharesSoldEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  SharesSoldEventObject
>;

export type SharesSoldEventFilter = TypedEventFilter<SharesSoldEvent>;

export interface Assetify extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AssetifyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAssetImage(
      assetId: BigNumberish,
      ipfsHash: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    assetShares(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string] & {
        name: string;
        totalShares: BigNumber;
        sharesAvailable: BigNumber;
        pricePerShare: BigNumber;
        owner: string;
      }
    >;

    balances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buyShares(
      assetId: BigNumberish,
      sharesToBuy: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    createAsset(
      name: string,
      totalShares: BigNumberish,
      pricePerShare: BigNumberish,
      ipfsHashes: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAllAssets(
      overrides?: CallOverrides
    ): Promise<[Assetify.AssetStructOutput[]]>;

    getAssetImages(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getContractBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentPrice(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserPortfolio(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    getUserShares(
      assetId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sellShares(
      assetId: BigNumberish,
      sharesToSell: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  addAssetImage(
    assetId: BigNumberish,
    ipfsHash: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  assetShares(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assets(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, string] & {
      name: string;
      totalShares: BigNumber;
      sharesAvailable: BigNumber;
      pricePerShare: BigNumber;
      owner: string;
    }
  >;

  balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  buyShares(
    assetId: BigNumberish,
    sharesToBuy: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  createAsset(
    name: string,
    totalShares: BigNumberish,
    pricePerShare: BigNumberish,
    ipfsHashes: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAllAssets(
    overrides?: CallOverrides
  ): Promise<Assetify.AssetStructOutput[]>;

  getAssetImages(
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentPrice(
    assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserPortfolio(
    user: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber[], BigNumber[]]>;

  getUserShares(
    assetId: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sellShares(
    assetId: BigNumberish,
    sharesToSell: BigNumberish,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAssetImage(
      assetId: BigNumberish,
      ipfsHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    assetShares(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, string] & {
        name: string;
        totalShares: BigNumber;
        sharesAvailable: BigNumber;
        pricePerShare: BigNumber;
        owner: string;
      }
    >;

    balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    buyShares(
      assetId: BigNumberish,
      sharesToBuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createAsset(
      name: string,
      totalShares: BigNumberish,
      pricePerShare: BigNumberish,
      ipfsHashes: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAllAssets(
      overrides?: CallOverrides
    ): Promise<Assetify.AssetStructOutput[]>;

    getAssetImages(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPortfolio(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[], BigNumber[]]>;

    getUserShares(
      assetId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellShares(
      assetId: BigNumberish,
      sharesToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetCreated(uint256,string,uint256,uint256,string[])"(
      assetId?: BigNumberish | null,
      name?: null,
      totalShares?: null,
      pricePerShare?: null,
      ipfsHashes?: null
    ): AssetCreatedEventFilter;
    AssetCreated(
      assetId?: BigNumberish | null,
      name?: null,
      totalShares?: null,
      pricePerShare?: null,
      ipfsHashes?: null
    ): AssetCreatedEventFilter;

    "ImageAdded(uint256,string)"(
      assetId?: BigNumberish | null,
      ipfsHash?: null
    ): ImageAddedEventFilter;
    ImageAdded(
      assetId?: BigNumberish | null,
      ipfsHash?: null
    ): ImageAddedEventFilter;

    "SharesPurchased(uint256,address,uint256,uint256)"(
      assetId?: BigNumberish | null,
      buyer?: null,
      amount?: null,
      newPricePerShare?: null
    ): SharesPurchasedEventFilter;
    SharesPurchased(
      assetId?: BigNumberish | null,
      buyer?: null,
      amount?: null,
      newPricePerShare?: null
    ): SharesPurchasedEventFilter;

    "SharesSold(uint256,address,uint256,uint256)"(
      assetId?: BigNumberish | null,
      seller?: null,
      amount?: null,
      newPricePerShare?: null
    ): SharesSoldEventFilter;
    SharesSold(
      assetId?: BigNumberish | null,
      seller?: null,
      amount?: null,
      newPricePerShare?: null
    ): SharesSoldEventFilter;
  };

  estimateGas: {
    addAssetImage(
      assetId: BigNumberish,
      ipfsHash: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    assetShares(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assets(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    buyShares(
      assetId: BigNumberish,
      sharesToBuy: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    createAsset(
      name: string,
      totalShares: BigNumberish,
      pricePerShare: BigNumberish,
      ipfsHashes: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAllAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetImages(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentPrice(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserPortfolio(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserShares(
      assetId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellShares(
      assetId: BigNumberish,
      sharesToSell: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAssetImage(
      assetId: BigNumberish,
      ipfsHash: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    assetShares(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assets(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balances(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyShares(
      assetId: BigNumberish,
      sharesToBuy: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createAsset(
      name: string,
      totalShares: BigNumberish,
      pricePerShare: BigNumberish,
      ipfsHashes: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAllAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetImages(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentPrice(
      assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserPortfolio(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserShares(
      assetId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellShares(
      assetId: BigNumberish,
      sharesToSell: BigNumberish,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
